{"ast":null,"code":"//import jwt_decode from 'jwt-decode';\nimport axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport { setAlert } from \"./alert\";\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_FAIL, LOGIN_SUCCESS, LOGOUT, CLEAR_PROFILE, ACCOUNT_CONFIRMED, RECOVERY_SEND } from \"./types\";\nexport const loadUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    const res = await axios.get(\"/api/auth\");\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n\n  try {\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    });\n    const res = await axios.post(\"/api/users\", body, config);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response;\n\n    if (errors) {\n      dispatch(setAlert(\"Email is in use\", \"danger\"));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; //Login User\n\nexport const login = (email, password) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(\"/api/auth\", body, config);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; //Authorize User\n\nexport const authorize = (email, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`/api/users/confirmation/${token}`, body, config);\n    dispatch({\n      type: ACCOUNT_CONFIRMED,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Set Recovery Token\n\nexport const recoveryPassword = email => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email\n  });\n\n  try {\n    const res = await axios.post(`/api/users/recovery`, body, config);\n    dispatch({\n      type: RECOVERY_SEND,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; //Set new password\n\nexport const changePassword = (email, password, token) => async dispatch => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const body = JSON.stringify({\n    email,\n    password\n  });\n\n  try {\n    const res = await axios.post(`/api/users/recovery/${token}`, body, config);\n    dispatch({\n      type: ACCOUNT_CONFIRMED,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\n    }\n\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Log user out\n\nexport const logout = () => dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n  dispatch({\n    type: CLEAR_PROFILE\n  });\n};","map":{"version":3,"sources":["F:/inÅ¼ynierka-projekt-18.07/joinjobs/client/src/actions/auth.js"],"names":["axios","setAuthToken","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_FAIL","LOGIN_SUCCESS","LOGOUT","CLEAR_PROFILE","ACCOUNT_CONFIRMED","RECOVERY_SEND","loadUser","dispatch","localStorage","token","res","get","type","payload","data","err","register","name","email","password","config","headers","body","JSON","stringify","post","errors","response","login","forEach","error","msg","authorize","recoveryPassword","changePassword","logout"],"mappings":"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","sourcesContent":["//import jwt_decode from 'jwt-decode';\r\nimport axios from \"axios\";\r\nimport setAuthToken from \"../utils/setAuthToken\";\r\nimport { setAlert } from \"./alert\";\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGOUT,\r\n  CLEAR_PROFILE,\r\n  ACCOUNT_CONFIRMED,\r\n  RECOVERY_SEND\r\n} from \"./types\";\r\n\r\nexport const loadUser = () => async dispatch => {\r\n  if (localStorage.token) {\r\n    setAuthToken(localStorage.token);\r\n  }\r\n\r\n  try {\r\n    const res = await axios.get(\"/api/auth\");\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//register user\r\nexport const register = ({ name, email, password }) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  try {\r\n    const body = JSON.stringify({ name, email, password});\r\n    const res = await axios.post(\"/api/users\", body, config);\r\n    \r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response;\r\n\r\n    if (errors) {\r\n      dispatch(setAlert(\"Email is in use\", \"danger\"));\r\n    }\r\n\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n\r\n\r\n//Login User\r\nexport const login = (email, password) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n\r\n  try {\r\n    const res = await axios.post(\"/api/auth\", body, config);\r\n\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n\r\n//Authorize User\r\nexport const authorize = (email, token) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n  try {\r\n    const res = await axios.post(`/api/users/confirmation/${token}`, body, config);\r\n    dispatch({\r\n      type: ACCOUNT_CONFIRMED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n//Set Recovery Token\r\nexport const recoveryPassword = (email) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email });\r\n  try {\r\n    const res = await axios.post(`/api/users/recovery`, body, config);\r\n    dispatch({\r\n      type: RECOVERY_SEND,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n//Set new password\r\nexport const changePassword = (email, password, token) => async dispatch => {\r\n  const config = {\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  };\r\n\r\n  const body = JSON.stringify({ email, password });\r\n  try {\r\n    const res = await axios.post(`/api/users/recovery/${token}`, body, config);\r\n    dispatch({\r\n      type: ACCOUNT_CONFIRMED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n\r\n    if (errors) {\r\n      errors.forEach(error => dispatch(setAlert(error.msg, \"danger\")));\r\n    }\r\n\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n// Log user out\r\nexport const logout = () => dispatch => {\r\n  dispatch({ type: LOGOUT });\r\n  dispatch({ type: CLEAR_PROFILE });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}