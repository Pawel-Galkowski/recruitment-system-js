{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\System-Rekrutacyjny\\\\client\\\\src\\\\components\\\\post\\\\Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport Spinner from '../layout/Spinner';\nimport PostItem from '../posts/PostItem';\nimport CommentItem from './CommentItem';\nimport CommentForm from './CommentForm';\nimport { getPost } from '../../actions/post';\nimport { getProfiles } from '../../actions/profile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = ({\n  getPost,\n  getProfiles,\n  post: {\n    post,\n    loading\n  },\n  profile,\n  match\n}) => {\n  _s();\n\n  useEffect(() => {\n    getPost(match.params.id);\n    getProfiles();\n  }, [getPost, match, getProfiles]);\n  return loading || post === null || profile.loading ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"paddingSection\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/posts\",\n        className: \"btn btn-light\",\n        children: \"Back to Posts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mainPost\",\n        children: /*#__PURE__*/_jsxDEV(PostItem, {\n          post: post,\n          showActions: false,\n          profile: profile.profiles\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n        postId: post._id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"comments\",\n        children: post.comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n          comment: comment,\n          postId: post._id\n        }, comment._id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Post, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Post;\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired,\n  getProfiles: PropTypes.func.isRequired,\n  profile: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post,\n  profile: state.profile\n});\n\nexport default connect(mapStateToProps, {\n  getPost,\n  getProfiles\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["C:/Users/admin/Documents/GitHub/System-Rekrutacyjny/client/src/components/post/Post.js"],"names":["React","Fragment","useEffect","PropTypes","Link","connect","Spinner","PostItem","CommentItem","CommentForm","getPost","getProfiles","Post","post","loading","profile","match","params","id","profiles","_id","comments","map","comment","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":"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","sourcesContent":["import React, { Fragment, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport Spinner from '../layout/Spinner';\r\nimport PostItem from '../posts/PostItem';\r\nimport CommentItem from './CommentItem';\r\nimport CommentForm from './CommentForm';\r\nimport { getPost } from '../../actions/post';\r\nimport { getProfiles } from '../../actions/profile';\r\n\r\nconst Post = ({ getPost, getProfiles, post: { post, loading }, profile, match }) => {\r\n  useEffect(() => {\r\n    getPost(match.params.id);\r\n    getProfiles();\r\n  }, [getPost, match, getProfiles]);\r\n  return loading || post === null || profile.loading ? (\r\n    <Spinner />\r\n  ) : (\r\n    <Fragment>\r\n      <div className=\"paddingSection\">\r\n        <Link to=\"/posts\" className=\"btn btn-light\">\r\n          Back to Posts\r\n        </Link>\r\n        <div className=\"mainPost\">\r\n          <PostItem post={post} showActions={false} profile={profile.profiles} />\r\n        </div>\r\n        <hr />\r\n        <CommentForm postId={post._id} />\r\n        <div className=\"comments\">\r\n          {post.comments.map((comment) => (\r\n            <CommentItem key={comment._id} comment={comment} postId={post._id} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nPost.propTypes = {\r\n  getPost: PropTypes.func.isRequired,\r\n  post: PropTypes.object.isRequired,\r\n  getProfiles: PropTypes.func.isRequired,\r\n  profile: PropTypes.object.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  post: state.post,\r\n  profile: state.profile,\r\n});\r\n\r\nexport default connect(mapStateToProps, { getPost, getProfiles })(Post);\r\n"]},"metadata":{},"sourceType":"module"}